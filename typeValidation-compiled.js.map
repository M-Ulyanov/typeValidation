{"version":3,"sources":["typeValidation.js"],"names":[],"mappings":";;;;;;;;;;AAUA,CAAC,YAAK;;AAGF,gBAAY,CAAC;;;;;;;;;AAUb,aAAS,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;AAC1C,YAAI,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;AAC1C,YAAI,SAAS,KAAK,OAAO,EAAE;AACvB,eAAG,CAAC,OAAO,iBAAe,IAAI,CAAC,IAAI,0EAAqE,SAAS,CAAG,CAAC;AACrH,mBAAO,KAAK,CAAC;SAChB;;AAED,YAAG,OAAO,IAAI,IAAI,EAAE;AAChB,mBAAO,GAAG,IAAI,CAAC;SAClB;;AAED,eAAO,YAAY;AACf,gBAAI,mBAAmB,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,EAAE;AAC7C,uBAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;aACzC;SACJ,CAAA;KACJ;;;;;;;;;AAUD,aAAS,mBAAmB;;;kCAAoB;gBAAnB,IAAI;gBAAE,IAAI;gBAAE,KAAK;;;AAC1C,iBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;AAEnC,oBAAI,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC5B,oBAAG,YAAY,KAAK,IAAI,EAAE;AACtB,6BAAS;iBACZ;;AAED,oBAAI,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;AACxD,oBAAG,eAAe,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;AAClD,6BAAS;iBACZ;;AAGD,oBAAI,OAAO,GAAG,YAAY,CAAC,GAAG,cAAY,YAAY,CAAC,GAAG,4BAA4B,CAAC,AAAE,CAAC;AAC1F,oBAAG,YAAY,CAAC,QAAQ,IAAI,eAAe,IAAI,IAAI,EAAE;AACjD,uBAAG,CAAC,OAAO,iBAAe,IAAI,CAAC,IAAI,6BAAwB,OAAO,uBAAkB,eAAe,CAAG,CAAC;AACvG,2BAAO,KAAK,CAAC;iBAChB;;AAGD,oBAAI,mBAAmB,GAAG,kBAAkB,CAAC,eAAe,CAAC,CAAC;AAC9D,oBAAG,OAAO,YAAY,CAAC,IAAI,KAAK,QAAQ,IAAI,mBAAmB,KAAK,YAAY,CAAC,IAAI,EAAE;AACnF,uBAAG,CAAC,OAAO,iBAAe,IAAI,CAAC,IAAI,oBAAe,OAAO,yBAAoB,YAAY,CAAC,IAAI,uBAAkB,mBAAmB,iBAAY,eAAe,OAAI,CAAC;AACnK,2BAAO,KAAK,CAAC;iBAChB;;AAGD,oBAAI,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;AACrC,oBAAG,OAAO,QAAQ,KAAK,UAAU,EAAE;AAC/B,wBAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,UAAC,OAAO,EAAK;AACnC,2BAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;qBACzB,CAAC,EAAE;AACJ,+BAAO,KAAK,CAAC;qBAChB;iBACJ;;AAGD,oBAAG,CAAC,mBAAmB,KAAK,OAAO,IAAI,mBAAmB,KAAK,QAAQ,CAAA,IAChE,kBAAkB,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,OAAO,EAAE;yBAC5B,IAAI;0BAAE,eAAe;0BAAE,YAAY,CAAC,KAAK;;AAvCnE,qBAAC,GAEF,YAAY,GAKZ,eAAe,GAMf,OAAO,GAOP,mBAAmB,GAOnB,QAAQ;;iBAaX;aAGJ;;AAED,mBAAO,IAAI,CAAC;SAEf;KAAA;;;;;;;AAQD,aAAS,GAAG,CAAC,IAAI,EAAE,OAAO,EAAE;AACxB,YAAI,IAAI,IAAI,OAAO,EAAE;AACjB,mBAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC;SAC1B,MACI;AACD,mBAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SACxB;KACJ;;;;;;;AAOD,aAAS,kBAAkB,CAAC,MAAM,EAAE;AAChC,eAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;KAC5E;;AAID,QAAK,OAAO,OAAO,KAAK,QAAQ,EAAG;AAC/B,cAAM,CAAC,OAAO,GAAG,cAAc,CAAC;KACnC,MACI;AACD,cAAM,CAAC,cAAc,GAAG,cAAc,CAAC;KAC1C;CAEJ,CAAA,EAAG,CAAC","file":"typeValidation-compiled.js","sourcesContent":["/*\r\n * typeValidation: Adds validation arguments for javascript functions\r\n * 0.1.1\r\n *\r\n * By Max Ulyanov\r\n * Src: https://github.com/M-Ulyanov/typeValidation\r\n */\r\n\r\n\r\n\r\n(()=> {\r\n\r\n\r\n    'use strict';\r\n\r\n\r\n    /**\r\n     *\r\n     * @param func\r\n     * @param model\r\n     * @param context\r\n     * @returns {*}\r\n     */\r\n    function typeValidation(func, model, context) {\r\n        let modelType = getConstructorName(model);\r\n        if (modelType !== 'array') {\r\n            log('error', `✘ Origin: ${func.name}; Expected: argument model should be of type array , instead got: ${modelType}`);\r\n            return false;\r\n        }\r\n\r\n        if(context == null) {\r\n            context = this;\r\n        }\r\n\r\n        return function () {\r\n            if (checkValidArguments(func, arguments, model)) {\r\n                return func.apply(context, arguments);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param func\r\n     * @param args\r\n     * @param model\r\n     * @returns {*}\r\n     */\r\n    function checkValidArguments(func, args, model) {\r\n        for (let i = 0; i < model.length; i++) {\r\n\r\n            let currentModel = model[i];\r\n            if(currentModel === null) {\r\n                continue;\r\n            }\r\n\r\n            let currentArgument = args[currentModel.key] || args[i];\r\n            if(currentArgument == null && !currentModel.required) {\r\n                continue;\r\n            }\r\n\r\n\r\n            let message = currentModel.key ? `field ${currentModel.key}` : `argument with index ${i}`;\r\n            if(currentModel.required && currentArgument == null) {\r\n                log('error', `✘ Origin: ${func.name}; Expected: required ${message}, instead got: ${currentArgument}`);\r\n                return false;\r\n            }\r\n\r\n\r\n            let currentArgumentType = getConstructorName(currentArgument);\r\n            if(typeof currentModel.type === 'string' && currentArgumentType !== currentModel.type) {\r\n                log('error', `✘ Origin: ${func.name}; Expected: ${message} must be of type ${currentModel.type}, instead got: ${currentArgumentType} (value: ${currentArgument})`);\r\n                return false;\r\n            }\r\n\r\n\r\n            let callback = currentModel.callback;\r\n            if(typeof callback === 'function') {\r\n                if(!callback(currentArgument, (message) => {\r\n                        log('error', message);\r\n                    })) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n\r\n            if((currentArgumentType === 'array' || currentArgumentType === 'object')\r\n                && getConstructorName(currentModel.items) === 'array') {\r\n                return checkValidArguments(func, currentArgument, currentModel.items);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param type\r\n     * @param message\r\n     */\r\n    function log(type, message) {\r\n        if (type in console) {\r\n            console[type](message);\r\n        }\r\n        else {\r\n            console.log(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param entity\r\n     * @returns {string}\r\n     */\r\n    function getConstructorName(entity) {\r\n        return Object.prototype.toString.call(entity).slice(8, -1).toLowerCase();\r\n    }\r\n\r\n\r\n\r\n    if ( typeof exports === 'object' ) {\r\n        module.exports = typeValidation;\r\n    }\r\n    else {\r\n        window.typeValidation = typeValidation;\r\n    }\r\n\r\n})();\r\n\r\n\r\n"]}